/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package markingmenu;

import java.awt.Color;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import javax.swing.JFrame;
import javax.swing.Popup;
import javax.swing.PopupFactory;
import javax.swing.Timer;

/**
 *
 * @author hakje
 */
public class MarkingMenu extends javax.swing.JPanel implements MarkingMenuItemPrivateListener {

    private JFrame myFrame;
    private MarkingMenuState state;
    private Popup popup;
    private int nbOptions;
    private Timer timer;
    private List<MarkingMenuItem> items;
    private List<String> labelOptions;
    private MarkingMenuItemListener observers;
    private Point firstPoint;
    private final static int MARKING_MENU_RAYON = 100;
    private final static int DELAT_ERROR = 30;

    /**
     * Creates new form Pie
     */
    public MarkingMenu() {
        this(Arrays.asList("one", "two", "three", "four", "five", "six", "seven"));
    }

    public MarkingMenu(List<String> label) {
        initComponents();
        state = MarkingMenuState.IDLE;
        items = new ArrayList();
        initMarkingMenu(label);
        observers = null;
        initFactory(0, 0);
        firstPoint = new Point(0, 0);
        hide();
        timer = new Timer(1000, (ActionEvent e) -> {
            timerListner();
        });
    }

    public final void initMarkingMenu(List<String> labels) {
        if (!isSameOptions(labels)) {
            labelOptions = labels;
            nbOptions = getLabelOptions().size();
            MarkingMenuItem app;

            for (MarkingMenuItem item : items) {
                remove(item);
            }
            items.clear();

            for (int i = 1; i <= nbOptions; i++) {
                Color c = getRandomColor();
                app = new MarkingMenuItem(c, i, nbOptions, labelOptions.get(i - 1), this);
                items.add(app);
                add(app);
                app.repaint();
            }
        }

    }

    public void initFactory(int posX, int posY) {
        PopupFactory factory = PopupFactory.getSharedInstance();

        int x = posX - (getPreferredSize().width / 2);
        int y = posY - (getPreferredSize().height / 2);

        hide();
        popup = factory.getPopup(myFrame, this, x, y);
        //show();
    }

    public void show() {
        if (popup != null) {
            popup.show();
        }
    }

    public void hide() {
        if (popup != null) {
            popup.hide();
        }
    }

    public void addMarkingMenuItemClick(MarkingMenuItemListener itemClickListener) {
        observers = itemClickListener;
    }

    public void removeMarkingMenuItemClick() {
        observers = null;
    }

    public MarkingMenuState getState() {
        return state;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);
        setLayout(new javax.swing.OverlayLayout(this));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private Color getRandomColor() {
        Random r = new Random();
        int rouge = r.nextInt(128);
        int vert = r.nextInt(128);
        int bleu = r.nextInt(128);

        return new Color(rouge + 128, vert + 128, bleu + 128);
    }

    public String getLabel(int numOption) {
        return labelOptions.get(numOption);
    }

    public List<String> getLabelOptions() {
        return labelOptions;
    }

    public void setListActions(List<String> label, int posX, int posY) {
        initMarkingMenu(label);
        initFactory(posX, posY);
    }

    public List<MarkingMenuItem> getItems() {
        return items;
    }

    private boolean isSameOptions(List<String> labels) {
        if (labels.size() == items.size()) {
            for (int i = 0; i < items.size(); i++) {
                if (!labels.get(i).equals(items.get(i).toString())) {
                    return false;
                }
            }
            return true;
        }
        return false;
    }

    public void initState() {
        state = MarkingMenuState.IDLE;
        hide();
    }

    public void updateState() {
        switch (state) {
            case MENU:
                show();
                break;
            case IDLE:
                hide();
                break;
            case MARKING:
                hide();
                break;
            case VISIBLE:
                show();
                break;
            case INVISIBLE:
                hide();
                break;
        }
    }

    private void timerListner() {
        switch (state) {
            case MENU:
                state = MarkingMenuState.MENU;
                //highlight()
                break;
            case IDLE:
                //INTERDIT
                break;
            case MARKING:
                state = MarkingMenuState.VISIBLE;
                timer.stop();
                show();
                //updateState();
                break;
            case VISIBLE:
                state = MarkingMenuState.VISIBLE;
                //highlight();
                //A3();
                //A4();
                break;
            case INVISIBLE:
                state = MarkingMenuState.INVISIBLE;
                //highlight();
                //A3();
                //A4();
                break;
        }

    }

    public void mouseMarkingMenuPressed(MouseEvent e) {
        switch (state) {
            case MENU:
                //INTERDIT
                break;
            case IDLE:
                state = MarkingMenuState.MARKING;
                firstPoint.setLocation(e.getX(), e.getY());
                timer.start();
                break;
            case MARKING:
                //INTERDIT
                break;
            case VISIBLE:
                //INTERDIT
                break;
            case INVISIBLE:
                //INTERDIT
                break;
        }
    }

    public void mouseMarkingMenuReleased(MouseEvent e, int nbOptions) {
        timer.stop();
        switch (state) {
            case MENU:
                //INTERDIT
                break;
            case IDLE:
                //INTERDIT
                break;
            case MARKING:
                state = MarkingMenuState.MENU;
                show();
                break;
            case VISIBLE:
                if (isInMenu() != -1) {
                    state = MarkingMenuState.IDLE;
                    //commande
                    fireObserversForItemAction(isInMenu());
                    hide();
                } else {
                    state = MarkingMenuState.IDLE;
                    hide();
                }
                break;
            case INVISIBLE:
                if (computeIsInMenu(e, nbOptions) != -1) {
                    state = MarkingMenuState.IDLE;
                    //commande();
                    fireObserversForItemAction(computeIsInMenu(e, nbOptions));
                    hide();
                } else {
                    state = MarkingMenuState.IDLE;
                    hide();
                }
                break;
        }
    }

    public void mouseMarkingMenuDragged(MouseEvent e) {
        switch (state) {
            case MENU:
                //INTERDIT
                break;
            case IDLE:
                //INTERDIT
                break;
            case MARKING:
                state = MarkingMenuState.INVISIBLE;
                timer.stop();
                break;
            case VISIBLE:
                //INTERDIT
                break;
            case INVISIBLE:
                //show();
                break;
        }
    }

    private void fireObserversForItemAction(int position) {
        if (observers != null) {
            observers.actionMarkingMenuPerformed(position);
            items.get(position - 1).setHighLight(false);
            removeMarkingMenuItemClick();
        }
        for (MarkingMenuItem item : items) {
            item.setHighLight(false);
        }
    }

    private int isInMenu() {
        int pos = -1;
        for (int i = 0; i < items.size(); i++) {
            if (items.get(i).isMouseIn()) {
                return i + 1;
            }
        }
        return pos;
    }

    private int computeIsInMenu(MouseEvent e, int nbOptions) {
        int distance = (int) e.getPoint().distance(firstPoint);
        Point origin = new Point(firstPoint.x, firstPoint.y - MARKING_MENU_RAYON);
        double angleSection = 360 / nbOptions;
        double angle = angleBetweenTwoPointsWithFixedPoint(e.getX(),e.getY(),origin.x, origin.y,firstPoint.x,firstPoint.y);
        angle = Math.toDegrees(angle);

        if (distance < MARKING_MENU_RAYON && distance > DELAT_ERROR) {
            if(angle < 0) {
                angle += 360;
            }
            return (int)((angle / angleSection)+1);
        } else {
            return -1;
        }
    }

    public static double angleBetweenTwoPointsWithFixedPoint(double point1X, double point1Y,
            double point2X, double point2Y,
            double fixedX, double fixedY) {

        double angle1 = Math.atan2(point1Y - fixedY, point1X - fixedX);
        double angle2 = Math.atan2(point2Y - fixedY, point2X - fixedX);

        return angle1 - angle2;
    }

    @Override
    public void actionMarkingMenuItemClicked(int position, MouseEvent e) {
        if (e.getButton() == MouseEvent.BUTTON1) {
            switch (state) {
                case MENU:
                    if (isInMenu() != -1) {
                        state = MarkingMenuState.IDLE;
                        //commande
                        fireObserversForItemAction(position);
                        hide();
                    } else {
                        state = MarkingMenuState.IDLE;
                        hide();
                    }
                    break;
                case IDLE:
                    //INTERDIT
                    break;
                case MARKING:
                    //INTERDIT
                    break;
                case VISIBLE:
                    //INTERDIT
                    break;
                case INVISIBLE:
                    //INTERDIT
                    break;
            }
        }
    }

    @Override
    public void actionMarkingMenuItemEntered(int position, MouseEvent e) {
        items.get(position - 1).setMouseIn(true);
        items.get(position - 1).setHighLight(true);
    }

    @Override
    public void actionMarkingMenuItemExited(int position, MouseEvent e) {
        items.get(position - 1).setMouseIn(true);
        items.get(position - 1).setHighLight(false);
    }

}
